int copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
    assert(USER_ACCESS(start, end));
    do {
       pte_t *ptep = get_pte(from, start, 0), *nptep;
       if (ptep == NULL) {
          start = ROUNDDOWN_2N(start + PTSIZE, PGSHIFT);
       continue ;
       }
       if (*ptep & PTE_P) {
          if ((nptep = get_pte(to, start, 1)) == NULL) {
             return -E_NO_MEM;
          }
          uint32_t perm = (*ptep & PTE_USER);
          struct Page *page = pte2page(*ptep);
          struct Page *npage=alloc_page();
          assert(page!=NULL);
          assert(npage!=NULL);
          int ret=0;
    #ifdef LAB3_EX2
    /* LAB3 EXERCISE2: YOUR CODE
    * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
    *
    * Some Useful MACROs and DEFINEs, you can use them in below implementation.
    * MACROs or Functions:
    *    page2kva(struct Page *page): return the kernel vritual addr of memory which page managed (SEE pmm.h)
    *    page_insert: build the map of phy addr of an Page with the linear addr la
    *    memcpy: typical memory copy function
    *
    * (1) find src_kvaddr: the kernel virtual address of page
    * (2) find dst_kvaddr: the kernel virtual address of npage
    * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
    * (4) build the map of phy addr of  nage with the linear addr start
    */
    memcpy(page2kva(npage), page2kva(page), PGSIZE);  //将父进程的物理页的内容复制到子进程中去
    page_insert(to, npage, start,perm);  //建立子进程的物理页与虚拟页的映射关系 
    #endif
          assert(ret == 0);
       }
       start += PGSIZE;
    } while (start != 0 && start < end);
    return 0;
    }